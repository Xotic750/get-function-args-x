{"version":3,"sources":["../src/get-function-args-x.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,MAAP,MAAmB,gBAAnB;AACA,OAAO,eAAP,MAA4B,oBAA5B;AACA,OAAO,SAAP,MAAsB,mBAAtB;AACA,OAAO,IAAP,MAAiB,QAAjB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,QAAT,CAA3B;AACA,IAAM,KAAK,GAAG,GAAd;AACA,IAAM,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,KAAP,CAAxB;AACA,IAAM,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,KAAP,CAAxB;AACA,IAAM,SAAS,GAAG,aAAlB;AACA,IAAM,OAAO,GAAG,sBAAhB;;AAEA,IAAM,OAAO,GAAG,SAAS,OAAT,CAAiB,GAAjB,EAAsB,IAAtB,EAA4B;AAC1C,MAAM,CAAC,GAAG,IAAI,CAAC,IAAD,CAAd;;AAEA,MAAI,CAAJ,EAAO;AACL,IAAA,GAAG,CAAC,GAAG,CAAC,MAAL,CAAH,GAAkB,CAAlB;AACD;;AAED,SAAO,GAAP;AACD,CARD;;AAUA,IAAM,SAAS,GAAG,SAAS,SAAT,CAAmB,EAAnB,EAAuB;AACvC,SAAO,SAAS,CAAC,EAAD,CAAhB;AACD,CAFD;AAIA;;;;;;;;;;AAQA,IAAM,eAAe,GAAG,SAAS,eAAT,CAAyB,EAAzB,EAA6B;AACnD,MAAM,MAAM,GAAG,OAAO,CAAC,SAAD,EAAY,EAAZ,CAAtB;;AAEA,MAAI,MAAM,CAAC,KAAX,EAAkB;AAChB;AACA,WAAO,KAAK,CAAZ;AACD;;AAED,MAAM,GAAG,GAAG,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,KAAR,EAAe,KAAf,CAAhB,CAArB;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,GAAD,EAAM,SAAN,CAAN,IAA0B,MAAM,CAAC,GAAD,EAAM,OAAN,CAA9C;AAEA,SAAO,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,GAAX,CAAT,GAA2B,EAAjC,EAAqC,OAArC,EAA8C,EAA9C,CAAb;AACD,CAZD;;AAcA,eAAe,eAAf","file":"get-function-args-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport reduce from 'array-reduce-x';\nimport replaceComments from 'replace-comments-x';\nimport normalise from 'normalize-space-x';\nimport trim from 'trim-x';\nimport methodize from 'simple-methodize-x';\n\nconst fToString = methodize(attempt.toString);\nconst SPACE = ' ';\nconst sMatch = methodize(SPACE.match);\nconst sSplit = methodize(SPACE.split);\nconst ARROW_ARG = /^([^(]+?)=>/;\nconst FN_ARGS = /^[^(]*\\( *([^)]*)\\)/m;\n\nconst reducer = function reducer(acc, item) {\n  const a = trim(item);\n\n  if (a) {\n    acc[acc.length] = a;\n  }\n\n  return acc;\n};\n\nconst attemptee = function attemptee(fn) {\n  return fToString(fn);\n};\n\n/**\n * This method returns the args of the function, or `undefined` if not\n * a function.\n *\n * @param {Function} fn - The function to get the args of.\n * @returns {undefined|Array} The args of the function, or `undefined` if\n *  not a function.\n */\nconst getFunctionArgs = function getFunctionArgs(fn) {\n  const result = attempt(attemptee, fn);\n\n  if (result.threw) {\n    /* eslint-disable-next-line no-void */\n    return void 0;\n  }\n\n  const str = normalise(replaceComments(result.value, SPACE));\n  const match = sMatch(str, ARROW_ARG) || sMatch(str, FN_ARGS);\n\n  return reduce(match ? sSplit(match[1], ',') : [], reducer, []);\n};\n\nexport default getFunctionArgs;\n"]}