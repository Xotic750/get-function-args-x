{"version":3,"sources":["../src/get-function-args-x.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,MAAP,MAAmB,gBAAnB;AACA,OAAO,eAAP,MAA4B,oBAA5B;AACA,OAAO,SAAP,MAAsB,mBAAtB;AACA,OAAO,IAAP,MAAiB,QAAjB;AACA,OAAO,UAAP,MAAuB,eAAvB;AAEA,IAAM,SAAS,GAAG,OAAO,CAAC,QAA1B;AACA,IAAM,KAAK,GAAG,GAAd;AACA,IAAM,MAAM,GAAG,KAAK,CAAC,KAArB;AACA,IAAM,MAAM,GAAG,KAAK,CAAC,KAArB;AACA,IAAM,SAAS,GAAG,aAAlB;AACA,IAAM,OAAO,GAAG,sBAAhB;;AAEA,IAAM,OAAO,GAAG,SAAS,OAAT,CAAiB,GAAjB,EAAsB,IAAtB,EAA4B;AAC1C,MAAM,CAAC,GAAG,IAAI,CAAC,IAAD,CAAd;;AAEA,MAAI,CAAJ,EAAO;AACL,IAAA,GAAG,CAAC,GAAG,CAAC,MAAL,CAAH,GAAkB,CAAlB;AACD;;AAED,SAAO,GAAP;AACD,CARD;AAUA;;;;;;;;;;AAQA,IAAM,eAAe,GAAG,SAAS,eAAT,CAAyB,EAAzB,EAA6B;AACnD,MAAI,UAAU,CAAC,EAAD,EAAK,IAAL,CAAV,KAAyB,KAA7B,EAAoC;AAClC;AACA,WAAO,KAAK,CAAZ;AACD;;AAED,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,EAAb,EAAiB,SAAjB,CAAf;;AAEA,MAAI,MAAM,CAAC,KAAX,EAAkB;AAChB,WAAO,EAAP;AACD;;AAED,MAAM,GAAG,GAAG,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,KAAR,EAAe,KAAf,CAAhB,CAArB;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,SAAjB,KAA+B,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAA7C;AAEA,SAAO,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,CAAD,CAAjB,EAAsB,GAAtB,CAAH,GAAgC,EAAtC,EAA0C,OAA1C,EAAmD,EAAnD,CAAb;AACD,CAhBD;;AAkBA,eAAe,eAAf","file":"get-function-args-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport reduce from 'array-reduce-x';\nimport replaceComments from 'replace-comments-x';\nimport normalise from 'normalize-space-x';\nimport trim from 'trim-x';\nimport isFunction from 'is-function-x';\n\nconst fToString = attempt.toString;\nconst SPACE = ' ';\nconst sMatch = SPACE.match;\nconst sSplit = SPACE.split;\nconst ARROW_ARG = /^([^(]+?)=>/;\nconst FN_ARGS = /^[^(]*\\( *([^)]*)\\)/m;\n\nconst reducer = function reducer(acc, item) {\n  const a = trim(item);\n\n  if (a) {\n    acc[acc.length] = a;\n  }\n\n  return acc;\n};\n\n/**\n * This method returns the args of the function, or `undefined` if not\n * a function.\n *\n * @param {Function} fn - The function to get the args of.\n * @returns {undefined|Array} The args of the function, or `undefined` if\n *  not a function.\n */\nconst getFunctionArgs = function getFunctionArgs(fn) {\n  if (isFunction(fn, true) === false) {\n    /* eslint-disable-next-line no-void */\n    return void 0;\n  }\n\n  const result = attempt.call(fn, fToString);\n\n  if (result.threw) {\n    return '';\n  }\n\n  const str = normalise(replaceComments(result.value, SPACE));\n  const match = sMatch.call(str, ARROW_ARG) || sMatch.call(str, FN_ARGS);\n\n  return reduce(match ? sSplit.call(match[1], ',') : [], reducer, []);\n};\n\nexport default getFunctionArgs;\n"]}